{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/CallingLispFunctions"},"abstract":[{"text":"Calling Lisp functions from your Swift code.","type":"text"}],"primaryContentSections":[{"content":[{"type":"heading","text":"funcall and apply","level":2,"anchor":"funcall-and-apply"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly to Emacs Lisp functions "},{"type":"codeVoice","code":"funcall"},{"type":"text","text":" and "},{"code":"apply","type":"codeVoice"},{"type":"text","text":", "},{"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Environment","type":"reference","isActive":true},{"type":"text","text":" provides methods with the same names with similar semantics. In 99% of the cases you’ll need "},{"code":"funcall","type":"codeVoice"},{"type":"text","text":", which accepts a function to call and whatever arguments you pass with it. Every function has a structure."}]},{"type":"codeListing","syntax":"swift","code":["env.funcall(\"lisp-function\", with: 42, 36.6, true, \"String\", [10, 20, 30])"]},{"inlineContent":[{"text":"As you can see, it accepts and properly converts native Swift types and values into their Lisp counterparts.","type":"text"},{"type":"text","text":" "},{"text":"If something goes wrong on the Emacs side, this call will throw ","type":"text"},{"type":"reference","identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsError","isActive":true},{"type":"text","text":". This can represent any error you usually see in Emacs, "},{"code":"void-function","type":"codeVoice"},{"type":"text","text":" for missing function with that name, or "},{"type":"codeVoice","code":"wrong-type-argument"},{"type":"text","text":", etc."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The only difference ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" function has over ","type":"text"},{"type":"codeVoice","code":"funcall"},{"type":"text","text":" is that it accepts an array of all of the call arguments as its second argument. So, it can be of use if you construct your arguments list in runtime."}]},{"inlineContent":[{"type":"text","text":"By default, "},{"type":"codeVoice","code":"funcall"},{"type":"text","text":" and "},{"code":"apply","type":"codeVoice"},{"text":" return an opaque ","type":"text"},{"type":"reference","identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsValue","isActive":true},{"type":"text","text":" (see "},{"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/TypeConversions","isActive":true,"type":"reference"},{"text":") that represents some dynamically typed Lisp value. All of the values under the hood are ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsValue"},{"type":"text","text":". However, both of these functions have a bit of generic magic to it, and if the return type should be something different and it is clear from the context, the environment will try to convert it for you."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s consider the following example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let result = try env.funcall(\"format\", with \"%S: %S\", 42, \"42\")"]},{"inlineContent":[{"type":"text","text":"This will produce "},{"isActive":true,"type":"reference","identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsValue"},{"type":"text","text":", but if we change it to either"}],"type":"paragraph"},{"code":["let result1: String = try env.funcall(\"format\", with \"%S: %S\", 42, \"42\")","let result2 = try env.funcall(\"format\", with \"%S: %S\", 42, \"42\") as String","acceptsString(try env.funcall(\"format\", with \"%S: %S\", 42, \"42\"))"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"it will get correctly converted into Swift’s own ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/emacsswiftmodule\/callinglispfunctions"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","role":"article","title":"Calling Lisp Functions","modules":[{"name":"EmacsSwiftModule"}]},"hierarchy":{"paths":[["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule"],["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Environment"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/DefiningAModule","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/DefiningLispFunctions","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/TypeConversions","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/ErrorHandling"],"generated":true,"title":"Getting started"}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","references":{"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/EmacsValue":{"role":"symbol","type":"topic","title":"EmacsValue","kind":"symbol","url":"\/documentation\/emacsswiftmodule\/emacsvalue","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmacsValue"}],"abstract":[{"type":"text","text":"An opaque Emacs value representing something from the Emacs Lisp world."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsValue","navigatorTitle":[{"kind":"identifier","text":"EmacsValue"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/DefiningAModule":{"role":"article","type":"topic","title":"Defining a module","kind":"article","url":"\/documentation\/emacsswiftmodule\/definingamodule","abstract":[{"type":"text","text":"Defining a new Emacs module from Swift."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/DefiningAModule"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/TypeConversions":{"role":"article","type":"topic","title":"Type conversions","kind":"article","url":"\/documentation\/emacsswiftmodule\/typeconversions","abstract":[{"text":"Converting Swift values into Lisp values and vice versa.","type":"text"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/TypeConversions"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/Environment":{"role":"symbol","type":"topic","title":"Environment","kind":"symbol","url":"\/documentation\/emacsswiftmodule\/environment","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Environment"}],"abstract":[{"type":"text","text":"Environment is the interaction point with Emacs. If you want to do anything on the Emacs side, you need to have an Environment."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Environment","navigatorTitle":[{"kind":"identifier","text":"Environment"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/DefiningLispFunctions":{"role":"article","type":"topic","title":"Defining Lisp Functions","kind":"article","url":"\/documentation\/emacsswiftmodule\/defininglispfunctions","abstract":[{"type":"text","text":"Defining Emacs Lisp functions directly from Swift."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/DefiningLispFunctions"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/ErrorHandling":{"role":"article","type":"topic","title":"Error Handling","kind":"article","url":"\/documentation\/emacsswiftmodule\/errorhandling","abstract":[{"text":"Handling Lisp errors on Swift side and vice versa.","type":"text"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/ErrorHandling"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule":{"role":"collection","abstract":[{"type":"text","text":"A Swift library to write Emacs plugins in Swift!"}],"title":"EmacsSwiftModule","url":"\/documentation\/emacsswiftmodule","identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule","kind":"symbol","type":"topic"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/EmacsError":{"role":"symbol","type":"topic","kind":"symbol","title":"EmacsError","url":"\/documentation\/emacsswiftmodule\/emacserror","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"EmacsError","kind":"identifier"}],"abstract":[{"type":"text","text":"The main type representing Emacs errors."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsError","navigatorTitle":[{"kind":"identifier","text":"EmacsError"}]}}}