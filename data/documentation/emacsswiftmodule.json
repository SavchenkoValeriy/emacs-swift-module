{"kind":"symbol","sections":[],"hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/emacsswiftmodule"]}],"topicSections":[{"identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/DefiningAModule","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/CallingLispFunctions","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/DefiningLispFunctions","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/TypeConversions","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/ErrorHandling"],"title":"Getting started"},{"title":"Advanced","identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Lifetimes","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/AsyncCallbacks"]},{"identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Environment","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/RuntimePointer"],"title":"Environment"},{"title":"Type conversions","identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/TypeConversions","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsConvertible","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/OpaquelyEmacsConvertible","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsValue","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/PersistentEmacsValue","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Symbol"]},{"identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/ErrorHandling","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsError"],"title":"Error handling"},{"title":"Asynchronous callbacks","identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/AsyncCallbacks","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Channel","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Environment\/openChannel(name:)"]},{"identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Module"],"title":"Protocols"},{"title":"Structures","identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/ConsCell"]},{"identifiers":["doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsVersion","doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/List"],"title":"Enumerations"}],"abstract":[{"type":"text","text":"A Swift library to write Emacs plugins in Swift!"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Emacs Swift module provides a convenient API for writing ","type":"text"},{"type":"reference","identifier":"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/elisp\/Writing-Dynamic-Modules.html","isActive":true},{"text":" in Swift. It marries a dynamic nature of Emacs Lisp with strong static typization of Swift and hides the roughness of the original C API together with harder aspects of that language such as a lack of closures and manual memory management. It also translates Emacs Lisp errors and Swift exceptions into each other.","type":"text"}]},{"level":2,"anchor":"A-Quick-Tour","text":"A Quick Tour","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"EmacsSwiftModule"},{"type":"text","text":" allows you to call functions from Emacs Lisp using Swiftâ€™s own types."}],"type":"paragraph"},{"syntax":"swift","code":["let two: Int = try env.funcall(\"+\", with: 1, 1)","assert(two == 2)","try env.funcall(\"message\", with: \"%S %S\", \"Hello\", 42)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And define your own Lisp functions out of Swift closures","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["try env.defun(\"foo\") {","  (x: Int, y: Int) in x + y","}","try env.defun(\"bar\") {","  (input: [String]) in input.joined(separator: \", \")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"that can be easily used in Emacs Lisp"}]},{"code":["(foo 1 1) ;; => 2","(bar [\"Hello\" \"World\"]) ;; => \"Hello, World\""],"syntax":"emacs-lisp","type":"codeListing"},{"inlineContent":[{"type":"text","text":"It handles errors on both sides so the user can almost always simply ignore them."}],"type":"paragraph"},{"syntax":"swift","code":["try env.defun(\"always-throws\") { (x: Int) throws in","  throw MyError(x: x)","}","try env.defun(\"calls-afdsiufs\") {","  (env: Environment) in","  do {","    try env.funcall(\"afdsiufs\", with: 42)","  } catch EmacsError.signal {","    print(\"Whoops! It looks like 'afdsiufs' doesn't exist!\")","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And on the Lisp side too"}],"type":"paragraph"},{"type":"codeListing","syntax":"emacs-lisp","code":["(always-throws 42) ;; => raises (swift-error \"Swift exception: MyError(x: 42)\")","(calls-afdsiufs) ;; => nil because we caught the error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same happens when a type requirement expected in Swift is not met."}]},{"syntax":"emacs-lisp","type":"codeListing","code":["(foo \"Hello\" \"World\") ;; => raises (wrong-type-argument numberp \"Hello\")"]}]}],"identifier":{"url":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"collection","title":"EmacsSwiftModule","modules":[{"name":"EmacsSwiftModule"}],"roleHeading":"Framework","externalID":"EmacsSwiftModule","symbolKind":"module"},"references":{"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/RuntimePointer":{"role":"symbol","type":"topic","title":"RuntimePointer","kind":"symbol","url":"\/documentation\/emacsswiftmodule\/runtimepointer","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RuntimePointer"}],"abstract":[{"type":"text","text":"A raw C pointer type from Emacs for the runtime."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/RuntimePointer","navigatorTitle":[{"kind":"identifier","text":"RuntimePointer"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/Lifetimes":{"role":"article","type":"topic","kind":"article","title":"Lifetimes","url":"\/documentation\/emacsswiftmodule\/lifetimes","abstract":[{"type":"text","text":"Emacs internals lifetimes."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Lifetimes"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/DefiningAModule":{"role":"article","type":"topic","title":"Defining a module","kind":"article","url":"\/documentation\/emacsswiftmodule\/definingamodule","abstract":[{"type":"text","text":"Defining a new Emacs module from Swift."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/DefiningAModule"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/Symbol":{"role":"symbol","type":"topic","kind":"symbol","title":"Symbol","url":"\/documentation\/emacsswiftmodule\/symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Symbol","kind":"identifier"}],"abstract":[{"type":"text","text":"Emacs named symbol"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Symbol","navigatorTitle":[{"kind":"identifier","text":"Symbol"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/List":{"role":"symbol","type":"topic","title":"List","kind":"symbol","url":"\/documentation\/emacsswiftmodule\/list","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"List"}],"abstract":[{"type":"text","text":"A simple list implementation that allows the most transparent conversion between two worlds."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/List","navigatorTitle":[{"kind":"identifier","text":"List"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule":{"role":"collection","abstract":[{"type":"text","text":"A Swift library to write Emacs plugins in Swift!"}],"title":"EmacsSwiftModule","url":"\/documentation\/emacsswiftmodule","identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule","kind":"symbol","type":"topic"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/EmacsError":{"role":"symbol","type":"topic","kind":"symbol","title":"EmacsError","url":"\/documentation\/emacsswiftmodule\/emacserror","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"EmacsError","kind":"identifier"}],"abstract":[{"type":"text","text":"The main type representing Emacs errors."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsError","navigatorTitle":[{"kind":"identifier","text":"EmacsError"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/Environment":{"role":"symbol","type":"topic","title":"Environment","kind":"symbol","url":"\/documentation\/emacsswiftmodule\/environment","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Environment"}],"abstract":[{"type":"text","text":"Environment is the interaction point with Emacs. If you want to do anything on the Emacs side, you need to have an Environment."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Environment","navigatorTitle":[{"kind":"identifier","text":"Environment"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/EmacsVersion":{"url":"\/documentation\/emacsswiftmodule\/emacsversion","title":"EmacsVersion","type":"topic","abstract":[],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"EmacsVersion","kind":"identifier"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsVersion","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EmacsVersion"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/Module":{"role":"symbol","type":"topic","kind":"symbol","title":"Module","url":"\/documentation\/emacsswiftmodule\/module","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Module","kind":"identifier"}],"abstract":[{"type":"text","text":"Emacs dynamic module, @main class of your package."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Module","navigatorTitle":[{"kind":"identifier","text":"Module"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/DefiningLispFunctions":{"role":"article","type":"topic","title":"Defining Lisp Functions","kind":"article","url":"\/documentation\/emacsswiftmodule\/defininglispfunctions","abstract":[{"type":"text","text":"Defining Emacs Lisp functions directly from Swift."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/DefiningLispFunctions"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/Environment/openChannel(name:)":{"role":"symbol","type":"topic","kind":"symbol","title":"openChannel(name:)","url":"\/documentation\/emacsswiftmodule\/environment\/openchannel(name:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"openChannel"},{"kind":"text","text":"("},{"text":"name","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:16EmacsSwiftModule7ChannelC","text":"Channel"}],"abstract":[{"type":"text","text":"Open a communication channel with Emacs for the time when Environment is not available."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Environment\/openChannel(name:)"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/Channel":{"role":"symbol","type":"topic","title":"Channel","kind":"symbol","url":"\/documentation\/emacsswiftmodule\/channel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Channel","kind":"identifier"}],"abstract":[{"type":"text","text":"A communication channel that can be used at all times."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/Channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/OpaquelyEmacsConvertible":{"role":"symbol","type":"topic","kind":"symbol","title":"OpaquelyEmacsConvertible","url":"\/documentation\/emacsswiftmodule\/opaquelyemacsconvertible","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OpaquelyEmacsConvertible"}],"abstract":[{"type":"text","text":"The protocol for converting custom Swift object into opaque Emacs values."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/OpaquelyEmacsConvertible","navigatorTitle":[{"kind":"identifier","text":"OpaquelyEmacsConvertible"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/EmacsConvertible":{"role":"symbol","type":"topic","title":"EmacsConvertible","kind":"symbol","url":"\/documentation\/emacsswiftmodule\/emacsconvertible","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"EmacsConvertible","kind":"identifier"}],"abstract":[{"type":"text","text":"The main protocol for value conversions between Emacs Lisp and Swift."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsConvertible","navigatorTitle":[{"kind":"identifier","text":"EmacsConvertible"}]},"https://www.gnu.org/software/emacs/manual/html_node/elisp/Writing-Dynamic-Modules.html":{"url":"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/elisp\/Writing-Dynamic-Modules.html","titleInlineContent":[{"text":"dynamic modules for Emacs","type":"text"}],"identifier":"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/elisp\/Writing-Dynamic-Modules.html","title":"dynamic modules for Emacs","type":"link"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/TypeConversions":{"role":"article","type":"topic","title":"Type conversions","kind":"article","url":"\/documentation\/emacsswiftmodule\/typeconversions","abstract":[{"text":"Converting Swift values into Lisp values and vice versa.","type":"text"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/TypeConversions"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/PersistentEmacsValue":{"role":"symbol","type":"topic","kind":"symbol","title":"PersistentEmacsValue","url":"\/documentation\/emacsswiftmodule\/persistentemacsvalue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"PersistentEmacsValue","kind":"identifier"}],"abstract":[{"text":"An Emacs value that can be safely copied and stored.","type":"text"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/PersistentEmacsValue","navigatorTitle":[{"kind":"identifier","text":"PersistentEmacsValue"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/EmacsValue":{"role":"symbol","type":"topic","title":"EmacsValue","kind":"symbol","url":"\/documentation\/emacsswiftmodule\/emacsvalue","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmacsValue"}],"abstract":[{"type":"text","text":"An opaque Emacs value representing something from the Emacs Lisp world."}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/EmacsValue","navigatorTitle":[{"kind":"identifier","text":"EmacsValue"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/ConsCell":{"role":"symbol","type":"topic","kind":"symbol","title":"ConsCell","url":"\/documentation\/emacsswiftmodule\/conscell","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ConsCell","kind":"identifier"}],"abstract":[{"type":"text","text":"Emacs cons cell"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/ConsCell","navigatorTitle":[{"kind":"identifier","text":"ConsCell"}]},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/AsyncCallbacks":{"role":"article","type":"topic","title":"Asynchronous Callbacks","kind":"article","url":"\/documentation\/emacsswiftmodule\/asynccallbacks","abstract":[{"text":"Calling Lisp functions without an active Environment.","type":"text"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/AsyncCallbacks"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/CallingLispFunctions":{"role":"article","type":"topic","kind":"article","title":"Calling Lisp Functions","url":"\/documentation\/emacsswiftmodule\/callinglispfunctions","abstract":[{"text":"Calling Lisp functions from your Swift code.","type":"text"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/CallingLispFunctions"},"doc://EmacsSwiftModule/documentation/EmacsSwiftModule/ErrorHandling":{"role":"article","type":"topic","title":"Error Handling","kind":"article","url":"\/documentation\/emacsswiftmodule\/errorhandling","abstract":[{"text":"Handling Lisp errors on Swift side and vice versa.","type":"text"}],"identifier":"doc:\/\/EmacsSwiftModule\/documentation\/EmacsSwiftModule\/ErrorHandling"}}}