{"interfaceLanguages":{"swift":[{"children":[{"title":"Getting started","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/definingamodule","title":"Defining a module","type":"article"},{"path":"\/documentation\/emacsswiftmodule\/callinglispfunctions","title":"Calling Lisp Functions","type":"article"},{"path":"\/documentation\/emacsswiftmodule\/defininglispfunctions","title":"Defining Lisp Functions","type":"article"},{"path":"\/documentation\/emacsswiftmodule\/typeconversions","title":"Type conversions","type":"article"},{"path":"\/documentation\/emacsswiftmodule\/errorhandling","title":"Error Handling","type":"article"},{"title":"Advanced","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/lifetimes","title":"Lifetimes","type":"article"},{"path":"\/documentation\/emacsswiftmodule\/asynccallbacks","title":"Asynchronous Callbacks","type":"article"},{"title":"Environment","type":"groupMarker"},{"children":[{"title":"Calling Emacs Lisp functions","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/callinglispfunctions","title":"Calling Lisp Functions","type":"article"},{"path":"\/documentation\/emacsswiftmodule\/environment\/apply(_:with:)-9alg5","title":"func apply(String, with: [any EmacsConvertible]) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/apply(_:with:)-4wizo","title":"func apply<R>(String, with: [any EmacsConvertible]) throws -> R","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/apply(_:with:)-7b6xj","title":"func apply(EmacsValue, with: [any EmacsConvertible]) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/apply(_:with:)-3nj8c","title":"func apply<R>(EmacsValue, with: [any EmacsConvertible]) throws -> R","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/funcall(_:with:)-9r958","title":"func funcall(String, with: any EmacsConvertible...) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/funcall(_:with:)-2u0kh","title":"func funcall<R>(String, with: any EmacsConvertible...) throws -> R","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/funcall(_:with:)-1c83v","title":"func funcall(EmacsValue, with: any EmacsConvertible...) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/funcall(_:with:)-61squ","title":"func funcall<R>(EmacsValue, with: any EmacsConvertible...) throws -> R","type":"method"},{"title":"Dealing with `nil` values","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/environment\/isnil(_:)","title":"func isNil(EmacsValue) throws -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/isnotnil(_:)","title":"func isNotNil(EmacsValue) throws -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/nil","title":"var Nil: EmacsValue","type":"property"},{"path":"\/documentation\/emacsswiftmodule\/environment\/t","title":"var t: EmacsValue","type":"property"},{"title":"Defining Emacs Lisp functions","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/defininglispfunctions","title":"Defining Lisp Functions","type":"article"},{"title":"Lifetime management","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/lifetimes","title":"Lifetimes","type":"article"},{"path":"\/documentation\/emacsswiftmodule\/environment\/preserve(_:)","title":"func preserve(EmacsValue) throws -> PersistentEmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/persistentemacsvalue","title":"PersistentEmacsValue","type":"class"},{"path":"\/documentation\/emacsswiftmodule\/environment\/retain(_:)","title":"func retain(EmacsValue) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/release(_:)","title":"func release(EmacsValue) throws","type":"method"},{"title":"Channel creation","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/asynccallbacks","title":"Asynchronous Callbacks","type":"article"},{"path":"\/documentation\/emacsswiftmodule\/environment\/openchannel(name:)","title":"func openChannel(name: String) throws -> Channel","type":"method"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/channel\/name","title":"let name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/channel\/callback(_:)-1u5q4","title":"func callback(EmacsValue) -> () -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/callback(_:)-1vthb","title":"func callback<each T>(EmacsValue) -> (repeat each T) -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/callback(function:)","title":"func callback<each T>(function: (Environment, repeat each T) throws -> Void) -> (repeat each T) -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/hook(_:)-3risf","title":"func hook(String) -> () -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/hook(_:)-59aby","title":"func hook<each T>(String) -> (repeat each T) -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/withasyncenvironment(_:)","title":"func withAsyncEnvironment<R>((Environment) throws -> R) async throws -> R","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/withenvironment(_:)","title":"func withEnvironment((Environment) throws -> Void)","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/channel","title":"Channel","type":"class"},{"title":"Misc","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/environment\/intern(_:)","title":"func intern(String) throws -> EmacsValue","type":"method"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/environment\/init(from:)","title":"convenience init(from: UnsafeMutablePointer<emacs_runtime>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/environment\/version","title":"let version: EmacsVersion","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/environment\/defun(_:with:function:)-1fh9i","title":"func defun<each T>(String?, with: String, function: (repeat each T) throws -> Void) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/defun(_:with:function:)-1tudj","title":"func defun<each T>(String?, with: String, function: (repeat each T) throws -> some EmacsConvertible) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/defun(_:with:function:)-8y1m3","title":"func defun<each T>(String?, with: String, function: (Environment, repeat each T) throws -> some EmacsConvertible) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/defun(_:with:function:)-aae","title":"func defun<each T>(String?, with: String, function: (Environment, repeat each T) throws -> Void) throws -> EmacsValue","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/interrupted()","title":"func interrupted() -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/environment\/invalidate()","title":"func invalidate()","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/environment","title":"Environment","type":"class"},{"path":"\/documentation\/emacsswiftmodule\/runtimepointer","title":"RuntimePointer","type":"typealias"},{"title":"Type conversions","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/typeconversions","title":"Type conversions","type":"article"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/emacsswiftmodule\/emacsconvertible\/convert(within:)-4bc2c","title":"func convert(within: Environment) throws -> EmacsValue","type":"method"}],"title":"EmacsConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/emacsswiftmodule\/emacsconvertible\/convert(within:)-dic5","title":"func convert(within: Environment) throws -> EmacsValue","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/emacsswiftmodule\/emacsconvertible\/convert(from:within:)-9biwx","title":"static func convert(from: EmacsValue, within: Environment) throws -> Self","type":"method"}],"title":"EmacsConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/emacsswiftmodule\/emacsconvertible\/convert(from:within:)-2h782","title":"static func convert(from: EmacsValue, within: Environment) throws -> Self","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/emacsconvertible","title":"EmacsConvertible","type":"protocol"},{"path":"\/documentation\/emacsswiftmodule\/opaquelyemacsconvertible","title":"OpaquelyEmacsConvertible","type":"protocol"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsvalue\/convert(within:)","title":"func convert(within: Environment) -> EmacsValue","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsvalue\/convert(from:within:)","title":"static func convert(from: EmacsValue, within: Environment) throws -> Self","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/emacsvalue\/emacsconvertible-implementations","title":"EmacsConvertible Implementations","type":"symbol"}],"path":"\/documentation\/emacsswiftmodule\/emacsvalue","title":"EmacsValue","type":"class"},{"path":"\/documentation\/emacsswiftmodule\/persistentemacsvalue","title":"PersistentEmacsValue","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/symbol\/init(name:)","title":"init(name: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/symbol\/name","title":"let name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/symbol\/convert(within:)","title":"func convert(within: Environment) throws -> EmacsValue","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/symbol\/convert(from:within:)","title":"static func convert(from: EmacsValue, within: Environment) throws -> Symbol","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/symbol","title":"Symbol","type":"struct"},{"title":"Error handling","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/errorhandling","title":"Error Handling","type":"article"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/customerror(message:)","title":"case customError(message: String)","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/interrupted","title":"case interrupted","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/lifetimeviolation","title":"case lifetimeViolation","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/nonasciisymbol(value:)","title":"case nonASCIISymbol(value: String)","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/signal(symbol:data:)","title":"case signal(symbol: EmacsValue, data: EmacsValue)","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/threadmodelviolation","title":"case threadModelViolation","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/thrown(tag:value:)","title":"case thrown(tag: EmacsValue, value: EmacsValue)","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/unknown","title":"case unknown","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/unsupported(what:)","title":"case unsupported(what: String)","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/wrongtype(expected:actual:value:)","title":"case wrongType(expected: String, actual: String, value: EmacsValue)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacserror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/emacsswiftmodule\/emacserror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/emacsswiftmodule\/emacserror","title":"EmacsError","type":"enum"},{"title":"Asynchronous callbacks","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/asynccallbacks","title":"Asynchronous Callbacks","type":"article"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/channel\/name","title":"let name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/channel\/callback(_:)-1u5q4","title":"func callback(EmacsValue) -> () -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/callback(_:)-1vthb","title":"func callback<each T>(EmacsValue) -> (repeat each T) -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/callback(function:)","title":"func callback<each T>(function: (Environment, repeat each T) throws -> Void) -> (repeat each T) -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/hook(_:)-3risf","title":"func hook(String) -> () -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/hook(_:)-59aby","title":"func hook<each T>(String) -> (repeat each T) -> Void","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/withasyncenvironment(_:)","title":"func withAsyncEnvironment<R>((Environment) throws -> R) async throws -> R","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/channel\/withenvironment(_:)","title":"func withEnvironment((Environment) throws -> Void)","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/channel","title":"Channel","type":"class"},{"path":"\/documentation\/emacsswiftmodule\/environment\/openchannel(name:)","title":"func openChannel(name: String) throws -> Channel","type":"method"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/module\/isgplcompatible","title":"var isGPLCompatible: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/module\/init(_:)","title":"func Init(Environment) throws","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/module","title":"Module","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/conscell\/init(car:cdr:)","title":"init(car: CarType, cdr: CdrType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/conscell\/car","title":"var car: CarType","type":"property"},{"path":"\/documentation\/emacsswiftmodule\/conscell\/cdr","title":"var cdr: CdrType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/conscell\/convert(within:)","title":"func convert(within: Environment) throws -> EmacsValue","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/conscell\/convert(from:within:)","title":"static func convert(from: EmacsValue, within: Environment) throws -> ConsCell<CarType, CdrType>","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/conscell\/emacsconvertible-implementations","title":"EmacsConvertible Implementations","type":"symbol"}],"path":"\/documentation\/emacsswiftmodule\/conscell","title":"ConsCell","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/_(_:_:)-2e8rc","title":"static func < (EmacsVersion, EmacsVersion) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/emacs25","title":"case Emacs25","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/emacs26","title":"case Emacs26","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/emacs27","title":"case Emacs27","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/emacs28","title":"case Emacs28","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/emacs29","title":"case Emacs29","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/emacs30","title":"case Emacs30","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/'...(_:)-8e4nd","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/'...(_:)-93h14","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/_(_:_:)-9p2ez","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/_=(_:_:)-394h3","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/_=(_:_:)-9fpev","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/emacsswiftmodule\/emacsversion\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/emacsswiftmodule\/emacsversion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/emacsversion\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/emacsversion\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/emacsswiftmodule\/emacsversion","title":"EmacsVersion","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/list\/cons(head:tail:)","title":"case Cons(head: Element, tail: List<Element>)","type":"case"},{"path":"\/documentation\/emacsswiftmodule\/list\/nil","title":"case Nil","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/list\/init(_:)","title":"init(Element...)","type":"init"},{"path":"\/documentation\/emacsswiftmodule\/list\/init(from:)","title":"init(from: [Element])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/list\/toarray()","title":"func toArray() -> [Element]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/list\/convert(within:)","title":"func convert(within: Environment) throws -> EmacsValue","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/list\/convert(from:within:)","title":"static func convert(from: EmacsValue, within: Environment) throws -> List<Element>","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/list\/emacsconvertible-implementations","title":"EmacsConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/list\/next()","title":"func next() -> Element?","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/list\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/list\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/emacsswiftmodule\/list\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/emacsswiftmodule\/list\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/emacsswiftmodule\/list\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/filter(_:)-6h9qp","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/filter(_:)-75nq","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/flatmap(_:)-425wu","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/flatmap(_:)-5wf03","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/joined(separator:)-2dfo3","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/joined(separator:)-3mr85","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/sorted(using:)-4q4p0","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/sorted(using:)-qxmg","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/emacsswiftmodule\/list\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/emacsswiftmodule\/list\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/emacsswiftmodule\/list","title":"List","type":"enum"}],"path":"\/documentation\/emacsswiftmodule","title":"EmacsSwiftModule","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}